(**************************************************************************)
(*                                                                        *)
(*     Alt-Ergo: The SMT Solver For Software Verification                 *)
(*     Copyright (C) 2013-2024 --- OCamlPro SAS                           *)
(*                                                                        *)
(*     This file is distributed under the terms of OCamlPro               *)
(*     Non-Commercial Purpose License, version 1.                         *)
(*                                                                        *)
(*     As an exception, Alt-Ergo Club members at the Gold level can       *)
(*     use this file under the terms of the Apache Software License       *)
(*     version 2.0.                                                       *)
(*                                                                        *)
(*     ---------------------------------------------------------------    *)
(*                                                                        *)
(*     The Alt-Ergo theorem prover                                        *)
(*                                                                        *)
(*     Sylvain Conchon, Evelyne Contejean, Francois Bobot                 *)
(*     Mohamed Iguernelala, Stephane Lescuyer, Alain Mebsout              *)
(*                                                                        *)
(*     CNRS - INRIA - Universite Paris Sud                                *)
(*                                                                        *)
(*     Until 2013, some parts of this code were released under            *)
(*     the Apache Software License version 2.0.                           *)
(*                                                                        *)
(*     ---------------------------------------------------------------    *)
(*                                                                        *)
(*     More details can be found in the directory licenses/               *)
(*                                                                        *)
(**************************************************************************)

module DE = Dolmen.Std.Expr

(** The purpose of this module is to construct a total order on ADT
    constructors to ensure the termination of model generation for
    this theory.

    By [nest], we mean the set of all the constructors in a mutually
    recursive definition of ADTs.

    Before comparing constructors with [compare], the complete
    nests to which they belong have to be added with [add_nest]. *)

type t = DE.ty_def list
(** Type of nest. *)

val add_nest : t -> unit
(** [add_nest defs] sorts and adds the nest [defs] in the current
    internal order.

    {b Note:} Assume that [defs] is a complete nest (in any order). *)

val compare : Uid.t -> Uid.t -> int
(** [compare id1 id2] compares the identifier [id1] and [id2] with
    the order generated by [add_nest] if they are both Dolmen identifiers. *)

val reinit : unit -> unit
(** [reinit ()] resets the internal order. *)
